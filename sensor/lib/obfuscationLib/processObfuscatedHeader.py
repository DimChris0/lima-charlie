# Copyright 2015 refractionPOINT
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import re
import random
import platform

random.seed()

def cHexToBin( val ):
    return chr( int( val.group(1), 16 ) )

def processObf( val, key ):
    output = ''
    obf = '{ '

    strmatch = re.match( '.*\"(.*)\".*', val )

    if strmatch:
        output = strmatch.group( 1 )
        output = re.sub( '\\\\x(..)', cHexToBin, output )
        output = output + chr( 0 )
        bufflen = len( output )

        index = 0
        for hx in output:
            obf = obf + hex( ( ( ord( key[ index % len( key ) ] ) ^ ( index % 255 ) ) ^ ( bufflen % 255 ) ) ^ ord( hx ) ) + ', '
            index = index + 1
            
        obf = obf[:-2] + ' }'
        
    return obf

def processObfW( val, key ):
    global wideCharSize
    output = ''
    obf = '{ '

    strmatch = re.match( '.*\"(.*)\".*', val )

    if strmatch:
        output = strmatch.group( 1 )
        output = re.sub( '\\\\x(..)', cHexToBin, output )
        output = output + chr( 0 )
        bufflen = len( output ) * wideCharSize

        index = 0
        for hx in output:
            obf = obf + hex( ( ( ord( key[ index % len( key ) ] ) ^ index ) ^ ( bufflen % 255 ) ) ^ ord( hx ) )

            obf = obf + ', '
            index = index + 1
            
            while( index % wideCharSize ) != 0:
                obf = obf + hex( ( ( ord( key[ index % len( key ) ] ) ^ index ) ^ ( bufflen % 255 ) ) ^ ord( chr( 0 ) ) )
                
                obf = obf + ', '
                index = index + 1
            
        obf = obf[:-2] + ' }'
        
    return obf





if 2 > len( sys.argv ):
    print( 'Usage: ' + sys.argv[ 0 ] + ' directoryToProcess' )
    sys.exit( 0 )

wideCharSize = 4
if 'windows' in ' '.join( platform.uname() ).lower():
    wideCharSize = 2

for dirname, dirnames, filenames in os.walk( sys.argv[ 1 ] ):
    for filename in filenames:
        if 'obfuscated.txt' == filename:
            f = open( os.path.join( dirname, filename ), 'r' )
            fout = open( os.path.join( dirname, 'obfuscated.h' ), 'wb' )

            fout.write( '//========================================================\n' )
            fout.write( '//\n' )
            fout.write( '// This file is automatically generated, to modify it, \n' )
            fout.write( '//     modify the original obfuscated.txt file.\n' )
            fout.write( '//\n' )
            fout.write( '//========================================================\n' )
            fout.write( '#ifndef _OBFUSCATIONLIB_DATA\n' )
            fout.write( '#define OBFUSCATIONLIB_KEY "' )
            
            
            key = ''
            for index in range( 0, 32 ):
                keyByte = random.randrange( 0, 255 )
                key = key + chr( keyByte )
                fout.write( '\\x' + (hex( keyByte ) )[2:] )

            fout.write( '"\n\n' )

            for line in f:
                toOutput = line

                matching = re.match( '.*OBFUSCATIONLIB_COMPILE\(_WCH\((.*)\)\).*', line )

                if matching:
                    print( "Obfuscating WIDE string: " + matching.group( 1 ) + "." )
                    result = processObfW( matching.group( 1 ), key )
                    original = '// WIDE: ' + matching.group( 1 ) + '\n'
                    toOutput = original + re.sub( 'OBFUSCATIONLIB_COMPILE\(.*\)', result, toOutput ) + '\n'
                    
                else:
                    matching = re.match( '.*OBFUSCATIONLIB_COMPILE\((.*)\).*', line )
                    
                    if matching:
                        print( "Obfuscating string: " + matching.group( 1 ) + "." )
                        result = processObf( matching.group( 1 ), key )
                        original = '// ' + matching.group( 1 ) + '\n'
                        toOutput = original + re.sub( 'OBFUSCATIONLIB_COMPILE\(.*\)', result, toOutput ) + '\n'

                fout.write( toOutput )

            print( "ObfuscationLib: File generated: " + os.path.join( dirname, 'obfuscated.h' ) + "." )
            fout.write( '\n#endif\n' )
            

print( "ObfuscationLib: Successfully obfuscated files in: " + sys.argv[ 1 ] + "." )
sys.exit( 0 )

